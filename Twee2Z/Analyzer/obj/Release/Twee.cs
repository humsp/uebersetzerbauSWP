//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Rene\Documents\Git\uebersetzerbauSWP\Twee2Z\Analyzer\Twee.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Twee2Z.Analyzer {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class Twee : Parser {
	public const int
		EQ_SIGN=47, FUNC_PARAM=40, MOD=46, SUB=44, SQ_BRACKET_OPEN=55, NOT=48, 
		SPACE=11, FUNC_LINK=52, IF=24, PASS=2, ACTIONS=32, WORD=12, SILENTLY=30, 
		MACRO_END=38, WORDS=56, NOBR=28, ENDIF=27, PIPE=53, LOG_OP=45, EXPRESSION=39, 
		ENDSILENTLY=31, CHOICE=33, ELSE_IF=25, EXCLUDE=8, LINK_END=57, ADD=43, 
		ENDNOBR=29, STRING_START=10, FUNC_START=5, PMODEWORD=14, ELSE=26, FUNC_BRACKET_OPEN=22, 
		EXP_END_L=50, STRING_BODY=19, PMODE_END=18, EXP_END_M=51, SET=35, INT=1, 
		EXP_END=49, VAR_NAME=6, MACRO_BRACKET_OPEN=37, MUL=41, PRINT=36, TAG_BEGIN=16, 
		TAG=15, SQ_BRACKET_CLOSE=54, TAG_END=17, STRING_END=20, DISPLAY=34, LINK_START=4, 
		FUNC_BRACKET_CLOSE=23, FUNC_NAME=21, MACRO_START=3, FORMAT=7, DIV=42, 
		NEW_LINE=9, STRING=13;
	public const int
		RULE_start = 0, RULE_ignoreFirst = 1, RULE_passage = 2, RULE_passageContent = 3, 
		RULE_link = 4, RULE_macro = 5, RULE_macroBranchIf = 6, RULE_macroBranchIfElse = 7, 
		RULE_macroBranchElse = 8, RULE_macroBranchPop = 9, RULE_expression = 10, 
		RULE_function = 11, RULE_variable = 12, RULE_zeichenkette = 13, RULE_text = 14;
	public static readonly string[] ruleNames = {
		"start", "ignoreFirst", "passage", "passageContent", "link", "macro", 
		"macroBranchIf", "macroBranchIfElse", "macroBranchElse", "macroBranchPop", 
		"expression", "function", "variable", "zeichenkette", "text"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'[['", null, null, null, null, null, null, "' '", 
		null, null, null, null, null, null, null, null, null, null, "'('", null, 
		"'if'", "'else if'", null, null, null, null, null, null, null, null, null, 
		null, null, null, "'>>'", null, null, "'*'", "'/'", "'+'", "'-'", null, 
		"'%'", "'='", "'not'", null, null, null, null, "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "PASS", "MACRO_START", "LINK_START", "FUNC_START", "VAR_NAME", 
		"FORMAT", "EXCLUDE", "NEW_LINE", "STRING_START", "SPACE", "WORD", "STRING", 
		"PMODEWORD", "TAG", "TAG_BEGIN", "TAG_END", "PMODE_END", "STRING_BODY", 
		"STRING_END", "FUNC_NAME", "FUNC_BRACKET_OPEN", "FUNC_BRACKET_CLOSE", 
		"IF", "ELSE_IF", "ELSE", "ENDIF", "NOBR", "ENDNOBR", "SILENTLY", "ENDSILENTLY", 
		"ACTIONS", "CHOICE", "DISPLAY", "SET", "PRINT", "MACRO_BRACKET_OPEN", 
		"MACRO_END", "EXPRESSION", "FUNC_PARAM", "MUL", "DIV", "ADD", "SUB", "LOG_OP", 
		"MOD", "EQ_SIGN", "NOT", "EXP_END", "EXP_END_L", "EXP_END_M", "FUNC_LINK", 
		"PIPE", "SQ_BRACKET_CLOSE", "SQ_BRACKET_OPEN", "WORDS", "LINK_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Twee.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Twee(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public IReadOnlyList<PassageContext> passage() {
			return GetRuleContexts<PassageContext>();
		}
		public IgnoreFirstContext ignoreFirst() {
			return GetRuleContext<IgnoreFirstContext>(0);
		}
		public PassageContext passage(int i) {
			return GetRuleContext<PassageContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; ignoreFirst();
			State = 34;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PASS) {
				{
				{
				State = 31; passage();
				}
				}
				State = 36;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IgnoreFirstContext : ParserRuleContext {
		public ITerminalNode PASS() { return GetToken(Twee.PASS, 0); }
		public IgnoreFirstContext ignoreFirst() {
			return GetRuleContext<IgnoreFirstContext>(0);
		}
		public PassageContext passage() {
			return GetRuleContext<PassageContext>(0);
		}
		public IgnoreFirstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ignoreFirst; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterIgnoreFirst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitIgnoreFirst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreFirst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IgnoreFirstContext ignoreFirst() {
		IgnoreFirstContext _localctx = new IgnoreFirstContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_ignoreFirst);
		int _la;
		try {
			State = 40;
			switch (_input.La(1)) {
			case PASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; passage();
				}
				break;
			case INT:
			case MACRO_START:
			case LINK_START:
			case FUNC_START:
			case VAR_NAME:
			case FORMAT:
			case EXCLUDE:
			case NEW_LINE:
			case STRING_START:
			case SPACE:
			case WORD:
			case STRING:
			case PMODEWORD:
			case TAG:
			case TAG_BEGIN:
			case TAG_END:
			case PMODE_END:
			case STRING_BODY:
			case STRING_END:
			case FUNC_NAME:
			case FUNC_BRACKET_OPEN:
			case FUNC_BRACKET_CLOSE:
			case IF:
			case ELSE_IF:
			case ELSE:
			case ENDIF:
			case NOBR:
			case ENDNOBR:
			case SILENTLY:
			case ENDSILENTLY:
			case ACTIONS:
			case CHOICE:
			case DISPLAY:
			case SET:
			case PRINT:
			case MACRO_BRACKET_OPEN:
			case MACRO_END:
			case EXPRESSION:
			case FUNC_PARAM:
			case MUL:
			case DIV:
			case ADD:
			case SUB:
			case LOG_OP:
			case MOD:
			case EQ_SIGN:
			case NOT:
			case EXP_END:
			case EXP_END_L:
			case EXP_END_M:
			case FUNC_LINK:
			case PIPE:
			case SQ_BRACKET_CLOSE:
			case SQ_BRACKET_OPEN:
			case WORDS:
			case LINK_END:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==PASS) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 39; ignoreFirst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassageContext : ParserRuleContext {
		public ITerminalNode PASS() { return GetToken(Twee.PASS, 0); }
		public ITerminalNode PMODEWORD() { return GetToken(Twee.PMODEWORD, 0); }
		public IReadOnlyList<ITerminalNode> PMODE_END() { return GetTokens(Twee.PMODE_END); }
		public ITerminalNode PMODE_END(int i) {
			return GetToken(Twee.PMODE_END, i);
		}
		public PassageContentContext passageContent() {
			return GetRuleContext<PassageContentContext>(0);
		}
		public ITerminalNode TAG() { return GetToken(Twee.TAG, 0); }
		public PassageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterPassage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitPassage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassageContext passage() {
		PassageContext _localctx = new PassageContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_passage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(PASS);
			State = 43; Match(PMODEWORD);
			State = 45;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 44; Match(TAG);
				}
				break;
			}
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << PASS) | (1L << MACRO_START) | (1L << LINK_START) | (1L << FUNC_START) | (1L << VAR_NAME) | (1L << FORMAT) | (1L << EXCLUDE) | (1L << NEW_LINE) | (1L << STRING_START) | (1L << SPACE) | (1L << WORD) | (1L << STRING) | (1L << PMODEWORD) | (1L << TAG) | (1L << TAG_BEGIN) | (1L << TAG_END) | (1L << STRING_BODY) | (1L << STRING_END) | (1L << FUNC_NAME) | (1L << FUNC_BRACKET_OPEN) | (1L << FUNC_BRACKET_CLOSE) | (1L << IF) | (1L << ELSE_IF) | (1L << ELSE) | (1L << ENDIF) | (1L << NOBR) | (1L << ENDNOBR) | (1L << SILENTLY) | (1L << ENDSILENTLY) | (1L << ACTIONS) | (1L << CHOICE) | (1L << DISPLAY) | (1L << SET) | (1L << PRINT) | (1L << MACRO_BRACKET_OPEN) | (1L << MACRO_END) | (1L << EXPRESSION) | (1L << FUNC_PARAM) | (1L << MUL) | (1L << DIV) | (1L << ADD) | (1L << SUB) | (1L << LOG_OP) | (1L << MOD) | (1L << EQ_SIGN) | (1L << NOT) | (1L << EXP_END) | (1L << EXP_END_L) | (1L << EXP_END_M) | (1L << FUNC_LINK) | (1L << PIPE) | (1L << SQ_BRACKET_CLOSE) | (1L << SQ_BRACKET_OPEN) | (1L << WORDS) | (1L << LINK_END))) != 0)) {
				{
				{
				State = 47;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==PMODE_END) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53; Match(PMODE_END);
			State = 55;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << MACRO_START) | (1L << LINK_START) | (1L << FUNC_START) | (1L << VAR_NAME) | (1L << FORMAT) | (1L << EXCLUDE) | (1L << NEW_LINE) | (1L << SPACE) | (1L << WORD) | (1L << STRING))) != 0)) {
				{
				State = 54; passageContent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassageContentContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LinkContext link() {
			return GetRuleContext<LinkContext>(0);
		}
		public PassageContentContext passageContent() {
			return GetRuleContext<PassageContentContext>(0);
		}
		public PassageContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passageContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterPassageContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitPassageContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassageContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassageContentContext passageContent() {
		PassageContentContext _localctx = new PassageContentContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_passageContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			switch (_input.La(1)) {
			case MACRO_START:
				{
				State = 57; macro();
				}
				break;
			case FUNC_START:
				{
				State = 58; function();
				}
				break;
			case INT:
			case FORMAT:
			case EXCLUDE:
			case NEW_LINE:
			case SPACE:
			case WORD:
			case STRING:
				{
				State = 59; text();
				}
				break;
			case VAR_NAME:
				{
				State = 60; variable();
				}
				break;
			case LINK_START:
				{
				State = 61; link();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 65;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 64; passageContent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		public ITerminalNode EXP_END_L() { return GetToken(Twee.EXP_END_L, 0); }
		public ITerminalNode PIPE() { return GetToken(Twee.PIPE, 0); }
		public ITerminalNode FUNC_LINK() { return GetToken(Twee.FUNC_LINK, 0); }
		public ITerminalNode EXPRESSION() { return GetToken(Twee.EXPRESSION, 0); }
		public ITerminalNode LINK_START() { return GetToken(Twee.LINK_START, 0); }
		public ITerminalNode SQ_BRACKET_CLOSE() { return GetToken(Twee.SQ_BRACKET_CLOSE, 0); }
		public ITerminalNode LINK_END() { return GetToken(Twee.LINK_END, 0); }
		public ITerminalNode SQ_BRACKET_OPEN() { return GetToken(Twee.SQ_BRACKET_OPEN, 0); }
		public IReadOnlyList<ITerminalNode> WORDS() { return GetTokens(Twee.WORDS); }
		public ITerminalNode WORDS(int i) {
			return GetToken(Twee.WORDS, i);
		}
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterLink(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitLink(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_link);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(LINK_START);
			State = 70;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 68; Match(WORDS);
				State = 69; Match(PIPE);
				}
				break;
			}
			State = 72;
			_la = _input.La(1);
			if ( !(_la==FUNC_LINK || _la==WORDS) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 78;
			switch (_input.La(1)) {
			case SQ_BRACKET_CLOSE:
				{
				{
				State = 73; Match(SQ_BRACKET_CLOSE);
				State = 74; Match(SQ_BRACKET_OPEN);
				State = 75; Match(EXPRESSION);
				State = 76; Match(EXP_END_L);
				}
				}
				break;
			case LINK_END:
				{
				State = 77; Match(LINK_END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public ITerminalNode MACRO_START(int i) {
			return GetToken(Twee.MACRO_START, i);
		}
		public ITerminalNode SET() { return GetToken(Twee.SET, 0); }
		public ITerminalNode NOBR() { return GetToken(Twee.NOBR, 0); }
		public ITerminalNode PRINT() { return GetToken(Twee.PRINT, 0); }
		public IReadOnlyList<ITerminalNode> MACRO_END() { return GetTokens(Twee.MACRO_END); }
		public MacroBranchIfElseContext macroBranchIfElse(int i) {
			return GetRuleContext<MacroBranchIfElseContext>(i);
		}
		public IReadOnlyList<MacroBranchIfElseContext> macroBranchIfElse() {
			return GetRuleContexts<MacroBranchIfElseContext>();
		}
		public LinkContext link() {
			return GetRuleContext<LinkContext>(0);
		}
		public MacroBranchPopContext macroBranchPop() {
			return GetRuleContext<MacroBranchPopContext>(0);
		}
		public MacroBranchElseContext macroBranchElse() {
			return GetRuleContext<MacroBranchElseContext>(0);
		}
		public ITerminalNode EXP_END_M() { return GetToken(Twee.EXP_END_M, 0); }
		public PassageContentContext passageContent() {
			return GetRuleContext<PassageContentContext>(0);
		}
		public ITerminalNode ACTIONS() { return GetToken(Twee.ACTIONS, 0); }
		public ITerminalNode SILENTLY() { return GetToken(Twee.SILENTLY, 0); }
		public ITerminalNode MACRO_END(int i) {
			return GetToken(Twee.MACRO_END, i);
		}
		public ITerminalNode ENDSILENTLY() { return GetToken(Twee.ENDSILENTLY, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode CHOICE() { return GetToken(Twee.CHOICE, 0); }
		public ITerminalNode EXPRESSION() { return GetToken(Twee.EXPRESSION, 0); }
		public ITerminalNode DISPLAY() { return GetToken(Twee.DISPLAY, 0); }
		public ITerminalNode ENDNOBR() { return GetToken(Twee.ENDNOBR, 0); }
		public MacroBranchIfContext macroBranchIf() {
			return GetRuleContext<MacroBranchIfContext>(0);
		}
		public IReadOnlyList<ITerminalNode> MACRO_START() { return GetTokens(Twee.MACRO_START); }
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_macro);
		int _la;
		try {
			int _alt;
			State = 122;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(MACRO_START);
				State = 81;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DISPLAY) | (1L << SET) | (1L << PRINT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 82; Match(EXPRESSION);
				State = 83; Match(EXP_END_M);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(MACRO_START);
				State = 91;
				switch (_input.La(1)) {
				case ACTIONS:
					{
					State = 85; Match(ACTIONS);
					State = 86; text();
					}
					break;
				case CHOICE:
					{
					State = 87; Match(CHOICE);
					State = 89;
					_la = _input.La(1);
					if (_la==LINK_START) {
						{
						State = 88; link();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 93; Match(MACRO_END);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94; macroBranchIf();
				State = 98;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 95; macroBranchIfElse();
						}
						} 
					}
					State = 100;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				State = 102;
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 101; macroBranchElse();
					}
					break;
				}
				State = 104; macroBranchPop();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106; Match(MACRO_START);
				State = 107; Match(NOBR);
				State = 108; Match(MACRO_END);
				State = 109; passageContent();
				State = 110; Match(MACRO_START);
				State = 111; Match(ENDNOBR);
				State = 112; Match(MACRO_END);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; Match(MACRO_START);
				State = 115; Match(SILENTLY);
				State = 116; Match(MACRO_END);
				State = 117; passageContent();
				State = 118; Match(MACRO_START);
				State = 119; Match(ENDSILENTLY);
				State = 120; Match(MACRO_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroBranchIfContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(Twee.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXP_END_M() { return GetToken(Twee.EXP_END_M, 0); }
		public PassageContentContext passageContent() {
			return GetRuleContext<PassageContentContext>(0);
		}
		public ITerminalNode MACRO_START() { return GetToken(Twee.MACRO_START, 0); }
		public MacroBranchIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroBranchIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterMacroBranchIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitMacroBranchIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroBranchIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroBranchIfContext macroBranchIf() {
		MacroBranchIfContext _localctx = new MacroBranchIfContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_macroBranchIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(MACRO_START);
			State = 125; Match(IF);
			State = 126; expression();
			State = 127; Match(EXP_END_M);
			State = 128; passageContent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroBranchIfElseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXP_END_M() { return GetToken(Twee.EXP_END_M, 0); }
		public ITerminalNode ELSE_IF() { return GetToken(Twee.ELSE_IF, 0); }
		public PassageContentContext passageContent() {
			return GetRuleContext<PassageContentContext>(0);
		}
		public ITerminalNode MACRO_START() { return GetToken(Twee.MACRO_START, 0); }
		public MacroBranchIfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroBranchIfElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterMacroBranchIfElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitMacroBranchIfElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroBranchIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroBranchIfElseContext macroBranchIfElse() {
		MacroBranchIfElseContext _localctx = new MacroBranchIfElseContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_macroBranchIfElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(MACRO_START);
			State = 131; Match(ELSE_IF);
			State = 132; expression();
			State = 133; Match(EXP_END_M);
			State = 134; passageContent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroBranchElseContext : ParserRuleContext {
		public ITerminalNode MACRO_END() { return GetToken(Twee.MACRO_END, 0); }
		public ITerminalNode ELSE() { return GetToken(Twee.ELSE, 0); }
		public PassageContentContext passageContent() {
			return GetRuleContext<PassageContentContext>(0);
		}
		public ITerminalNode MACRO_START() { return GetToken(Twee.MACRO_START, 0); }
		public MacroBranchElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroBranchElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterMacroBranchElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitMacroBranchElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroBranchElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroBranchElseContext macroBranchElse() {
		MacroBranchElseContext _localctx = new MacroBranchElseContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_macroBranchElse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(MACRO_START);
			State = 137; Match(ELSE);
			State = 138; Match(MACRO_END);
			State = 139; passageContent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroBranchPopContext : ParserRuleContext {
		public ITerminalNode MACRO_END() { return GetToken(Twee.MACRO_END, 0); }
		public ITerminalNode ENDIF() { return GetToken(Twee.ENDIF, 0); }
		public ITerminalNode MACRO_START() { return GetToken(Twee.MACRO_START, 0); }
		public MacroBranchPopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroBranchPop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterMacroBranchPop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitMacroBranchPop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroBranchPop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroBranchPopContext macroBranchPop() {
		MacroBranchPopContext _localctx = new MacroBranchPopContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_macroBranchPop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(MACRO_START);
			State = 142; Match(ENDIF);
			State = 143; Match(MACRO_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode EXPRESSION() { return GetToken(Twee.EXPRESSION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(EXPRESSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNC_PARAM(int i) {
			return GetToken(Twee.FUNC_PARAM, i);
		}
		public ITerminalNode FUNC_START() { return GetToken(Twee.FUNC_START, 0); }
		public ITerminalNode EXPRESSION() { return GetToken(Twee.EXPRESSION, 0); }
		public ITerminalNode FUNC_BRACKET_OPEN() { return GetToken(Twee.FUNC_BRACKET_OPEN, 0); }
		public ITerminalNode EXP_END() { return GetToken(Twee.EXP_END, 0); }
		public IReadOnlyList<ITerminalNode> FUNC_PARAM() { return GetTokens(Twee.FUNC_PARAM); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 147; Match(FUNC_START);
			State = 148; Match(FUNC_BRACKET_OPEN);
			State = 156;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 149; Match(EXPRESSION);
				}
				break;

			case 2:
				{
				State = 150; Match(EXPRESSION);
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 151; Match(FUNC_PARAM);
					}
					}
					State = 154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==FUNC_PARAM );
				}
				break;
			}
			State = 158; Match(EXP_END);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR_NAME() { return GetToken(Twee.VAR_NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(VAR_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZeichenketteContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WORD() { return GetTokens(Twee.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(Twee.WORD, i);
		}
		public ZeichenketteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zeichenkette; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterZeichenkette(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitZeichenkette(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZeichenkette(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZeichenketteContext zeichenkette() {
		ZeichenketteContext _localctx = new ZeichenketteContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_zeichenkette);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 162; Match(WORD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 165;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ZeichenketteContext zeichenkette() {
			return GetRuleContext<ZeichenketteContext>(0);
		}
		public ITerminalNode EXCLUDE() { return GetToken(Twee.EXCLUDE, 0); }
		public ITerminalNode FORMAT() { return GetToken(Twee.FORMAT, 0); }
		public ITerminalNode INT() { return GetToken(Twee.INT, 0); }
		public IReadOnlyList<ITerminalNode> SPACE() { return GetTokens(Twee.SPACE); }
		public ITerminalNode NEW_LINE() { return GetToken(Twee.NEW_LINE, 0); }
		public ITerminalNode STRING() { return GetToken(Twee.STRING, 0); }
		public ITerminalNode SPACE(int i) {
			return GetToken(Twee.SPACE, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweeListener typedListener = listener as ITweeListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweeVisitor<TResult> typedVisitor = visitor as ITweeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_text);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			switch (_input.La(1)) {
			case WORD:
				{
				State = 167; zeichenkette();
				}
				break;
			case SPACE:
				{
				State = 169;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 168; Match(SPACE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 171;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case NEW_LINE:
				{
				State = 173; Match(NEW_LINE);
				}
				break;
			case INT:
				{
				State = 174; Match(INT);
				}
				break;
			case FORMAT:
				{
				State = 175; Match(FORMAT);
				}
				break;
			case EXCLUDE:
				{
				State = 176; Match(EXCLUDE);
				}
				break;
			case STRING:
				{
				State = 177; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 181;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 180; text();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3;\xBA\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\x3\x2\a\x2#\n\x2\f\x2\xE\x2&\v\x2\x3\x3\x3\x3\x3\x3\x5\x3+"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x5\x4\x30\n\x4\x3\x4\a\x4\x33\n\x4\f\x4\xE\x4"+
		"\x36\v\x4\x3\x4\x3\x4\x5\x4:\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5"+
		"\x41\n\x5\x3\x5\x5\x5\x44\n\x5\x3\x6\x3\x6\x3\x6\x5\x6I\n\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6Q\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x5\a\\\n\a\x5\a^\n\a\x3\a\x3\a\x3\a\a\a\x63\n\a\f\a\xE"+
		"\a\x66\v\a\x3\a\x5\ai\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a}\n\a\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x6\r\x9B\n\r\r"+
		"\r\xE\r\x9C\x5\r\x9F\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x6\xF\xA6\n\xF\r"+
		"\xF\xE\xF\xA7\x3\x10\x3\x10\x6\x10\xAC\n\x10\r\x10\xE\x10\xAD\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x5\x10\xB5\n\x10\x3\x10\x5\x10\xB8\n\x10\x3"+
		"\x10\x2\x2\x2\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\x6\x3\x2\x4\x4\x3\x2\x14"+
		"\x14\x4\x2\x36\x36::\x3\x2$&\xCA\x2 \x3\x2\x2\x2\x4*\x3\x2\x2\x2\x6,\x3"+
		"\x2\x2\x2\b@\x3\x2\x2\x2\n\x45\x3\x2\x2\x2\f|\x3\x2\x2\x2\xE~\x3\x2\x2"+
		"\x2\x10\x84\x3\x2\x2\x2\x12\x8A\x3\x2\x2\x2\x14\x8F\x3\x2\x2\x2\x16\x93"+
		"\x3\x2\x2\x2\x18\x95\x3\x2\x2\x2\x1A\xA2\x3\x2\x2\x2\x1C\xA5\x3\x2\x2"+
		"\x2\x1E\xB4\x3\x2\x2\x2 $\x5\x4\x3\x2!#\x5\x6\x4\x2\"!\x3\x2\x2\x2#&\x3"+
		"\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\x3\x3\x2\x2\x2&$\x3\x2\x2\x2\'"+
		"+\x5\x6\x4\x2()\n\x2\x2\x2)+\x5\x4\x3\x2*\'\x3\x2\x2\x2*(\x3\x2\x2\x2"+
		"+\x5\x3\x2\x2\x2,-\a\x4\x2\x2-/\a\x10\x2\x2.\x30\a\x11\x2\x2/.\x3\x2\x2"+
		"\x2/\x30\x3\x2\x2\x2\x30\x34\x3\x2\x2\x2\x31\x33\n\x3\x2\x2\x32\x31\x3"+
		"\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2"+
		"\x35\x37\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x39\a\x14\x2\x2\x38:\x5\b"+
		"\x5\x2\x39\x38\x3\x2\x2\x2\x39:\x3\x2\x2\x2:\a\x3\x2\x2\x2;\x41\x5\f\a"+
		"\x2<\x41\x5\x18\r\x2=\x41\x5\x1E\x10\x2>\x41\x5\x1A\xE\x2?\x41\x5\n\x6"+
		"\x2@;\x3\x2\x2\x2@<\x3\x2\x2\x2@=\x3\x2\x2\x2@>\x3\x2\x2\x2@?\x3\x2\x2"+
		"\x2\x41\x43\x3\x2\x2\x2\x42\x44\x5\b\x5\x2\x43\x42\x3\x2\x2\x2\x43\x44"+
		"\x3\x2\x2\x2\x44\t\x3\x2\x2\x2\x45H\a\x6\x2\x2\x46G\a:\x2\x2GI\a\x37\x2"+
		"\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IJ\x3\x2\x2\x2JP\t\x4\x2\x2KL\a\x38"+
		"\x2\x2LM\a\x39\x2\x2MN\a)\x2\x2NQ\a\x34\x2\x2OQ\a;\x2\x2PK\x3\x2\x2\x2"+
		"PO\x3\x2\x2\x2Q\v\x3\x2\x2\x2RS\a\x5\x2\x2ST\t\x5\x2\x2TU\a)\x2\x2U}\a"+
		"\x35\x2\x2V]\a\x5\x2\x2WX\a\"\x2\x2X^\x5\x1E\x10\x2Y[\a#\x2\x2Z\\\x5\n"+
		"\x6\x2[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\^\x3\x2\x2\x2]W\x3\x2\x2\x2]Y\x3"+
		"\x2\x2\x2^_\x3\x2\x2\x2_}\a(\x2\x2`\x64\x5\xE\b\x2\x61\x63\x5\x10\t\x2"+
		"\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3"+
		"\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gi\x5\x12\n\x2hg\x3\x2\x2"+
		"\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jk\x5\x14\v\x2k}\x3\x2\x2\x2lm\a\x5\x2"+
		"\x2mn\a\x1E\x2\x2no\a(\x2\x2op\x5\b\x5\x2pq\a\x5\x2\x2qr\a\x1F\x2\x2r"+
		"s\a(\x2\x2s}\x3\x2\x2\x2tu\a\x5\x2\x2uv\a \x2\x2vw\a(\x2\x2wx\x5\b\x5"+
		"\x2xy\a\x5\x2\x2yz\a!\x2\x2z{\a(\x2\x2{}\x3\x2\x2\x2|R\x3\x2\x2\x2|V\x3"+
		"\x2\x2\x2|`\x3\x2\x2\x2|l\x3\x2\x2\x2|t\x3\x2\x2\x2}\r\x3\x2\x2\x2~\x7F"+
		"\a\x5\x2\x2\x7F\x80\a\x1A\x2\x2\x80\x81\x5\x16\f\x2\x81\x82\a\x35\x2\x2"+
		"\x82\x83\x5\b\x5\x2\x83\xF\x3\x2\x2\x2\x84\x85\a\x5\x2\x2\x85\x86\a\x1B"+
		"\x2\x2\x86\x87\x5\x16\f\x2\x87\x88\a\x35\x2\x2\x88\x89\x5\b\x5\x2\x89"+
		"\x11\x3\x2\x2\x2\x8A\x8B\a\x5\x2\x2\x8B\x8C\a\x1C\x2\x2\x8C\x8D\a(\x2"+
		"\x2\x8D\x8E\x5\b\x5\x2\x8E\x13\x3\x2\x2\x2\x8F\x90\a\x5\x2\x2\x90\x91"+
		"\a\x1D\x2\x2\x91\x92\a(\x2\x2\x92\x15\x3\x2\x2\x2\x93\x94\a)\x2\x2\x94"+
		"\x17\x3\x2\x2\x2\x95\x96\a\a\x2\x2\x96\x9E\a\x18\x2\x2\x97\x9F\a)\x2\x2"+
		"\x98\x9A\a)\x2\x2\x99\x9B\a*\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2"+
		"\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\x97"+
		"\x3\x2\x2\x2\x9E\x98\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x3\x2\x2"+
		"\x2\xA0\xA1\a\x33\x2\x2\xA1\x19\x3\x2\x2\x2\xA2\xA3\a\b\x2\x2\xA3\x1B"+
		"\x3\x2\x2\x2\xA4\xA6\a\xE\x2\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2"+
		"\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\x1D\x3\x2\x2\x2\xA9\xB5\x5"+
		"\x1C\xF\x2\xAA\xAC\a\r\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD"+
		"\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB5\x3\x2\x2\x2\xAF\xB5\a\v\x2"+
		"\x2\xB0\xB5\a\x3\x2\x2\xB1\xB5\a\t\x2\x2\xB2\xB5\a\n\x2\x2\xB3\xB5\a\xF"+
		"\x2\x2\xB4\xA9\x3\x2\x2\x2\xB4\xAB\x3\x2\x2\x2\xB4\xAF\x3\x2\x2\x2\xB4"+
		"\xB0\x3\x2\x2\x2\xB4\xB1\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB3\x3\x2"+
		"\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB8\x5\x1E\x10\x2\xB7\xB6\x3\x2\x2\x2\xB7"+
		"\xB8\x3\x2\x2\x2\xB8\x1F\x3\x2\x2\x2\x16$*/\x34\x39@\x43HP[]\x64h|\x9C"+
		"\x9E\xA7\xAD\xB4\xB7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Twee2Z.Analyzer
